<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 2;
vsp = 0;
hsp = 0;
jumpspeed = 20;
movespeed = 5;
image_speed = .5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movements, imputs

key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check_released(ord("W"));
mouse_left = mouse_check_button(mb_left);
//what happens to imputs
move = key_left + key_right;
switch(move) {
             case 1:
                  sprite_index = spr_player_right;
                  
             break;
             case -1:
                  sprite_index = spr_player_left;
                  
             break;
             case 0:
                  sprite_index = spr_player_idle;
             break;

}
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;
if (place_meeting(x,y+5,obj_floor))
{
vsp = key_jump * -jumpspeed;
}
if (place_meeting(x,y-1,obj_floor))
{
vsp = key_jump * -jumpspeed;
}

// Horizontal collisons
if (place_meeting(x+hsp,y,obj_floor))
{
    while (!place_meeting(x+sign(hsp),y,obj_floor))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

// vertical collisions
if (place_meeting(x,y+vsp,obj_floor))
{
    while (!place_meeting(x,y+vsp,obj_floor))
    {
        y += sign(vsp); 
    }
    vsp = 0;
}
y += vsp; 

//WEAPON
if (mouse_left == 1) 
{
    if(x&gt;mouse_x)
    { sprite_index



    dir = point_direction(x,y,mouse_x,mouse_y)



}








//boundries
/*
x = min(x,room_width-16);
x = max(x,16);
y = max(y,16);
if (y &gt; 750) 
{
x = 64;
y = 320;
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
